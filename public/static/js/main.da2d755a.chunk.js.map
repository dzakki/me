{"version":3,"sources":["components/Navbar.jsx","components/Close.jsx","containers/Home.jsx","containers/About.jsx","components/Main.jsx","RootRouter.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Close","Date","getFullYear","rel","target","Home","id","Main","style","display","flexDirection","minHeight","width","flex","marginTop","exact","path","alignItems","RootRouter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAEe,SAASA,IACpB,OACI,yBAAKC,UAAU,cACX,6BAASA,UAAU,gCACf,uBAAGC,KAAK,IAAID,UAAU,oBAAtB,UACA,4BACI,4BACI,uBAAGC,KAAK,MAAR,UAEJ,4BACI,uBAAGA,KAAK,MAAR,a,MCTT,SAASC,IAEpB,OACI,4BAAQF,UAAU,4BACd,iCACI,oCACQ,IAAIG,MAAOC,cADnB,iBACgD,uBAAGH,KAAK,4BAA4BI,IAAI,+BAA+BC,OAAO,UAA9E,UADhD,yBACuK,uBAAGL,KAAK,qBAAqBI,IAAI,+BAA+BC,OAAO,UAAvE,a,MCNxK,SAASC,IACpB,OACI,6BAASP,UAAU,YAAYQ,GAAG,QAC9B,yBAAKR,UAAU,WACX,wBAAIA,UAAU,WAAd,iBAGA,wBAAIA,UAAU,cAAd,0CAGA,wBAAIA,UAAU,mBACV,4BACI,uBAAGC,KAAK,4BAA4BI,IAAI,+BAA+BC,OAAO,UAA9E,WAEJ,4BACI,uBAAGL,KAAK,qCAAqCI,IAAI,+BAA+BC,OAAO,UAAvF,gBChBT,SAASC,IACpB,OACI,+CCMO,SAASE,IACpB,OACI,oCACI,yBAAKC,MAAO,CACRC,QAAS,OACTC,cAAe,SACfC,UAAW,QACXC,MAAO,SAEP,kBAACf,EAAD,MACA,yBAAKW,MAAO,CACRK,KAAM,EACNJ,QAAS,OACTK,UAAW,WAEX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAACX,EAAD,OAEJ,kBAAC,IAAD,CAAOW,KAAK,UACR,kBAAC,EAAD,SAIZ,yBAAKR,MAAO,CACRK,KAAM,EACNJ,QAAS,OACTQ,WAAY,aAEZ,kBAACjB,EAAD,SCjCL,SAASkB,IACpB,OACI,kBAAC,IAAD,KACI,kBAACX,EAAD,O,MCCGY,MANf,WACE,OACE,kBAACD,EAAD,OCMgBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.da2d755a.chunk.js","sourcesContent":["import React from 'react';\nimport './navbar.css';\nexport default function Navbar() {\n    return (\n        <nav className=\"navigation\">\n            <section className=\"container navigation-wrapper\">\n                <a href=\"/\" className=\"navigation-title\">Dzakki</a>\n                <ul>\n                    <li>\n                        <a href=\"/#\">Posts</a>\n                    </li>\n                    <li>\n                        <a href=\"/#\">About</a>\n                    </li>\n                </ul>\n            </section>\n        </nav>\n    )\n}","import React from 'react';\nimport './close.css';\n\nexport default function Close() {\n\n    return (\n        <footer className=\"container footer-wrapper\">\n            <section>\n                <p>\n                    Â© { new Date().getFullYear() } . Created by <a href=\"https://github.com/dzakki\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Dzakki</a> with inspiration by  <a href=\"https://gohugo.io/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\"> Hugo </a>\n                </p>\n            </section>\n        </footer>\n    )\n}","import React from 'react';\nimport \"./home.css\"\n\nexport default function Home() {\n    return (\n        <section className=\"container\" id=\"home\">\n            <div className=\"content\">\n                <h1 className=\"my-name\">\n                    Ahmad Muzakki\n                </h1>\n                <h2 className=\"my-subject\">\n                    Fullstack Developer and Problem Solver\n                </h2>\n                <ul className=\"my-social-media\">\n                    <li>\n                        <a href=\"https://github.com/dzakki\" rel=\"nofollow noopener noreferrer\" target=\"_blank\" >Github</a>\n                    </li>\n                    <li>\n                        <a href=\"https://www.linkedin.com/in/dzakki\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">LinkedIn</a>\n                    </li>\n                </ul>\n            </div>\n        </section>\n    )\n}","import React from 'react';\n\nexport default function Home() {\n    return (\n        <h1>This about page</h1>\n    )\n}","import React from 'react';\nimport {\n    Switch,\n    Route\n} from 'react-router-dom';\nimport Navbar from './Navbar';\nimport Close from './Close';\nimport Home from '../containers/Home';\nimport About from '../containers/About';\n\nexport default function Main() {\n    return (\n        <>\n            <div style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                minHeight: \"100vh\",\n                width: \"100%\"\n            }}>\n                <Navbar />\n                <div style={{\n                    flex: 1,\n                    display: \"flex\",\n                    marginTop: \"1.9rem\",\n                }}>\n                    <Switch>\n                        <Route exact path=\"/\" >\n                            <Home />\n                        </Route>\n                        <Route path=\"/about\">\n                            <About />\n                        </Route>\n                    </Switch>\n                </div>\n                <div style={{\n                    flex: 1,\n                    display: \"flex\",\n                    alignItems: \"flex-end\"\n                }}>\n                    <Close />\n                </div>\n            </div>\n        </>\n    )\n}","import React from 'react';\nimport {\n    BrowserRouter as Router,\n} from 'react-router-dom';\nimport Main from './components/Main';\n\nexport default function RootRouter () {\n    return (\n        <Router>\n            <Main />\n        </Router>\n    )\n}","import React from 'react';\nimport RootRouter from './RootRouter';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <RootRouter />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}